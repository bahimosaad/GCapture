/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * IndexingUserFrame02.java
 *
 * Created on Nov 5, 2010, 2:44:33 PM
 */
package com.indexing.qa.view;

import com.asprise.util.tiff.TIFFReader;
import com.gdit.capture.entity.Capture;
import com.gdit.capture.entity.CaptureHome;
import com.gdit.capture.entity.Category;
import com.gdit.capture.entity.Disk;
import com.gdit.capture.entity.DocumentData;
import com.gdit.capture.entity.DocumentDataHome;
import com.gdit.capture.entity.DocumentDataHome02;
import com.gdit.capture.entity.Field;
import com.gdit.capture.entity.FieldHome02;
import com.gdit.capture.entity.Rep;
import com.gdit.capture.entity.RepHome;
import com.gdit.capture.entity.Users;
import com.gdit.capture.model.CaptureStatus;
import com.gdit.capture.model.CaptureTreeNode;
import com.gdit.capture.model.LazyLoadingTreeController;
import com.gdit.capture.run.ImageGenerator;
import com.gdit.gui.SharedGUIMethods;
import com.gdit.image.ImageLoader;
import com.indexing.Constants;
import com.indexing.ImageCanvas;
//import com.indexing.ImageLoader;
import com.indexing.ImageUtils;
import com.indexing.Node;
import com.indexing.Tree;
import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.MediaTracker;
import java.awt.Toolkit;
import java.awt.event.FocusEvent;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

/**
 *
 * @author ehab
 */
public class IndexingQAFrame02 extends javax.swing.JFrame {

    /**
     * Creates new form IndexingUserFrame02
     */
    public IndexingQAFrame02(Category cat) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
        }
        this.category = category;
        preInitComponents();
        initComponents();
        postInitComponents();
    }

    private void preInitComponents() {
        imageCanvas = new ImageCanvas();
    }

    private void postInitComponents() {
        releasResources();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        batchesDialog = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        batchesDlgcancleBTN = new javax.swing.JButton();
        batchesDlgShowBTN = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        waitingToIndexBatchesList = new javax.swing.JList();
        menuToolBar = new javax.swing.JToolBar();
        searchBTN = new javax.swing.JButton();
        releaseBatchBTN = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        acceptBTN = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        statusPanel = new javax.swing.JPanel();
        statusLBL = new javax.swing.JLabel();
        statusLBL2 = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        treeScrolPan = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();
        containerPanel = new javax.swing.JPanel();
        viewerSplitPan = new javax.swing.JSplitPane();
        imagePanel = new javax.swing.JScrollPane();
        docDataJScrollPanel = new javax.swing.JScrollPane();
        docDataPanel = new javax.swing.JPanel();
        imageToolBar = new javax.swing.JToolBar();
        prevBTN = new javax.swing.JButton();
        nextBTN = new javax.swing.JButton();
        separator03 = new javax.swing.JToolBar.Separator();
        maxBTN = new javax.swing.JButton();
        minBTN = new javax.swing.JButton();
        autoBTN = new javax.swing.JButton();
        zoomLBL = new javax.swing.JLabel();
        separator04 = new javax.swing.JToolBar.Separator();
        rotateLeftBTN = new javax.swing.JButton();
        rotateRightBTN = new javax.swing.JButton();
        mainMenu = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openBatchMenuItem = new javax.swing.JMenuItem();
        repleaseBatchMenueItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        exitFrameMenuItem = new javax.swing.JMenuItem();
        imageMenu = new javax.swing.JMenu();
        nextMenuItem = new javax.swing.JMenuItem();
        previousMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        maxmizeMenuItem = new javax.swing.JMenuItem();
        minimzeMenuItem = new javax.swing.JMenuItem();
        autoFitMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        rotateLeftMenuItem = new javax.swing.JMenuItem();
        rotateRightMenuItem = new javax.swing.JMenuItem();

        jLabel2.setText("Batchs");
        batchesDialog.getContentPane().add(jLabel2, java.awt.BorderLayout.PAGE_START);

        batchesDlgcancleBTN.setText("Cancle");
        batchesDlgcancleBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batchesDlgcancleBTNActionPerformed(evt);
            }
        });
        jPanel1.add(batchesDlgcancleBTN);

        batchesDlgShowBTN.setText("Show");
        batchesDlgShowBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batchesDlgShowBTNActionPerformed(evt);
            }
        });
        jPanel1.add(batchesDlgShowBTN);

        batchesDialog.getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        waitingToIndexBatchesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        waitingToIndexBatchesList.setToolTipText("batchs");
        jScrollPane1.setViewportView(waitingToIndexBatchesList);

        batchesDialog.getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Indexing");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        menuToolBar.setRollover(true);

        searchBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/gdit/resources/icons/search32_a.png"))); // NOI18N
        searchBTN.setText("Open Batch");
        searchBTN.setFocusable(false);
        searchBTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        searchBTN.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBTNActionPerformed(evt);
            }
        });
        menuToolBar.add(searchBTN);

        releaseBatchBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/gdit/resources/icons/close_32.png"))); // NOI18N
        releaseBatchBTN.setText("release batch");
        releaseBatchBTN.setFocusable(false);
        releaseBatchBTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        releaseBatchBTN.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        releaseBatchBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                releaseBatchBTNActionPerformed(evt);
            }
        });
        menuToolBar.add(releaseBatchBTN);
        menuToolBar.add(jSeparator1);

        acceptBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/gdit/resources/icons/accept32.png"))); // NOI18N
        acceptBTN.setText("Accept");
        acceptBTN.setFocusable(false);
        acceptBTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        acceptBTN.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        acceptBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptBTNActionPerformed(evt);
            }
        });
        menuToolBar.add(acceptBTN);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/gdit/resources/icons/delete32.png"))); // NOI18N
        jButton2.setText("Exception");
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        menuToolBar.add(jButton2);

        getContentPane().add(menuToolBar, java.awt.BorderLayout.PAGE_START);

        statusPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        statusPanel.setLayout(new java.awt.BorderLayout());

        statusLBL.setText("status");
        statusPanel.add(statusLBL, java.awt.BorderLayout.CENTER);

        statusLBL2.setText("status 2");
        statusPanel.add(statusLBL2, java.awt.BorderLayout.LINE_END);

        getContentPane().add(statusPanel, java.awt.BorderLayout.PAGE_END);

        jSplitPane1.setDividerLocation(150);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Root");
        tree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        tree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treeValueChanged(evt);
            }
        });
        treeScrolPan.setViewportView(tree);

        jSplitPane1.setLeftComponent(treeScrolPan);

        containerPanel.setLayout(new java.awt.BorderLayout());

        viewerSplitPan.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        viewerSplitPan.setResizeWeight(0.75);

        imagePanel.setBorder(null);
        viewerSplitPan.setLeftComponent(imagePanel);

        docDataPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("doc data"));
        docDataPanel.setLayout(new java.awt.GridLayout(0, 3));
        docDataJScrollPanel.setViewportView(docDataPanel);

        viewerSplitPan.setRightComponent(docDataJScrollPanel);

        containerPanel.add(viewerSplitPan, java.awt.BorderLayout.CENTER);

        imageToolBar.setRollover(true);

        prevBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/gdit/resources/icons/prev.png"))); // NOI18N
        prevBTN.setFocusable(false);
        prevBTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        prevBTN.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        prevBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevBTNActionPerformed(evt);
            }
        });
        imageToolBar.add(prevBTN);

        nextBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/gdit/resources/icons/next.png"))); // NOI18N
        nextBTN.setFocusable(false);
        nextBTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nextBTN.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        nextBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBTNActionPerformed(evt);
            }
        });
        imageToolBar.add(nextBTN);
        imageToolBar.add(separator03);

        maxBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/gdit/resources/icons/max.png"))); // NOI18N
        maxBTN.setFocusable(false);
        maxBTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        maxBTN.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        maxBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxBTNActionPerformed(evt);
            }
        });
        imageToolBar.add(maxBTN);

        minBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/gdit/resources/icons/min.png"))); // NOI18N
        minBTN.setFocusable(false);
        minBTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        minBTN.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        minBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minBTNActionPerformed(evt);
            }
        });
        imageToolBar.add(minBTN);

        autoBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/gdit/resources/icons/auto.png"))); // NOI18N
        autoBTN.setFocusable(false);
        autoBTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        autoBTN.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        autoBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoBTNActionPerformed(evt);
            }
        });
        imageToolBar.add(autoBTN);

        zoomLBL.setFont(new java.awt.Font("Tahoma", 1, 11));
        zoomLBL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        zoomLBL.setText("100%");
        zoomLBL.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        zoomLBL.setMaximumSize(new java.awt.Dimension(50, 35));
        zoomLBL.setMinimumSize(new java.awt.Dimension(50, 35));
        imageToolBar.add(zoomLBL);
        imageToolBar.add(separator04);

        rotateLeftBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/gdit/resources/icons/rotateLeft32.png"))); // NOI18N
        rotateLeftBTN.setFocusable(false);
        rotateLeftBTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rotateLeftBTN.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rotateLeftBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateLeftBTNActionPerformed(evt);
            }
        });
        imageToolBar.add(rotateLeftBTN);

        rotateRightBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/gdit/resources/icons/rotateRight32.png"))); // NOI18N
        rotateRightBTN.setFocusable(false);
        rotateRightBTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rotateRightBTN.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rotateRightBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateRightBTNActionPerformed(evt);
            }
        });
        imageToolBar.add(rotateRightBTN);

        containerPanel.add(imageToolBar, java.awt.BorderLayout.NORTH);

        jSplitPane1.setRightComponent(containerPanel);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");

        openBatchMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openBatchMenuItem.setText("Open batch");
        openBatchMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openBatchMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openBatchMenuItem);

        repleaseBatchMenueItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        repleaseBatchMenueItem.setText("Release batch");
        repleaseBatchMenueItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repleaseBatchMenueItemActionPerformed(evt);
            }
        });
        fileMenu.add(repleaseBatchMenueItem);
        fileMenu.add(jSeparator4);

        exitFrameMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitFrameMenuItem.setText("Exit");
        exitFrameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitFrameMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitFrameMenuItem);

        mainMenu.add(fileMenu);

        imageMenu.setText("Image");

        nextMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        nextMenuItem.setText("Next");
        nextMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextMenuItemActionPerformed(evt);
            }
        });
        imageMenu.add(nextMenuItem);

        previousMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        previousMenuItem.setText("Previous");
        previousMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousMenuItemActionPerformed(evt);
            }
        });
        imageMenu.add(previousMenuItem);
        imageMenu.add(jSeparator2);

        maxmizeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ADD, java.awt.event.InputEvent.CTRL_MASK));
        maxmizeMenuItem.setText("Maxmize");
        maxmizeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxmizeMenuItemActionPerformed(evt);
            }
        });
        imageMenu.add(maxmizeMenuItem);

        minimzeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_SUBTRACT, java.awt.event.InputEvent.CTRL_MASK));
        minimzeMenuItem.setText("Minimize");
        minimzeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minimzeMenuItemActionPerformed(evt);
            }
        });
        imageMenu.add(minimzeMenuItem);

        autoFitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_0, java.awt.event.InputEvent.CTRL_MASK));
        autoFitMenuItem.setText("Auto fit");
        autoFitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoFitMenuItemActionPerformed(evt);
            }
        });
        imageMenu.add(autoFitMenuItem);
        imageMenu.add(jSeparator3);

        rotateLeftMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        rotateLeftMenuItem.setText("Rotate left");
        rotateLeftMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateLeftMenuItemActionPerformed(evt);
            }
        });
        imageMenu.add(rotateLeftMenuItem);

        rotateRightMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        rotateRightMenuItem.setText("Rotate right");
        rotateRightMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateRightMenuItemActionPerformed(evt);
            }
        });
        imageMenu.add(rotateRightMenuItem);

        mainMenu.add(imageMenu);

        setJMenuBar(mainMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBTNActionPerformed
        CaptureHome dao = new CaptureHome();
        java.util.List<Capture> allBatches = dao.getIndexedBatches();
        DefaultListModel capturesLISTModel = new DefaultListModel();
        for (Capture batch : allBatches) {
            capturesLISTModel.addElement(batch);
        }
        waitingToIndexBatchesList.setModel(capturesLISTModel);
        batchesDialog.pack();
        batchesDialog.setModal(true);
        SharedGUIMethods.centerWindow(batchesDialog);
        batchesDialog.setVisible(true);
    }//GEN-LAST:event_searchBTNActionPerformed

    private void batchesDlgShowBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batchesDlgShowBTNActionPerformed
        releaseBatchBTNActionPerformed(evt);
        currentBatch = (Capture) waitingToIndexBatchesList.getSelectedValue();
        currentBatch.setLocked(true);
        CaptureHome captureHome = new CaptureHome();
        captureHome.updateLock(currentBatch);
        try {
            releasResources();
            loadSelectedBatch();
            createUserFolder();
            updateTree();
//            startLoading();
            buildFieldsPanel();
        } catch (Exception e) {
            e.printStackTrace();
        }
        batchesDialog.dispose();
        statusLBL2.setText("current Batch: " + currentBatch.getName());
    }//GEN-LAST:event_batchesDlgShowBTNActionPerformed

    private void treeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeValueChanged
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
        if (selectedNode != null) {
            if (selectedNode.getUserObject() instanceof Capture) {
                Capture capture = (Capture) selectedNode.getUserObject();

//                if (currentDoc != null) {
//                    Capture newDoc = null;
//                    switch (capture.getType()) {
//                        case Constants.PAGE_TYPE:
//                            newDoc = capture.getCapture();
//                            break;
//                        case Constants.DOC_TYPE:
//                            newDoc = capture;
//                            break;
//                        case Constants.BATCH_TYPE:
//                            newDoc = null;
//                            break;
//                    }
//                    if (!currentDoc.equals(newDoc)) {
//
//                        int option = JOptionPane.showConfirmDialog(this, "Save Document?");
//                        switch (option) {
//                            case JOptionPane.YES_OPTION:
//                                saveData();
//                            case JOptionPane.NO_OPTION:
//                                clearGUI();
//                                break;
//                            case JOptionPane.CANCEL_OPTION:
//                                tree.setSelectionPath(evt.getOldLeadSelectionPath());
//                                return;
//                        }
//                    } else {
//                    }
//                }

                if (capture.getType() == Constants.PAGE_TYPE) {
                    Capture batch = capture.getCapture().getCapture();
                    Disk disk = batch.getDisk();
                    Category category = batch.getCategory();
                    String path = null;
                    if (category.isCreateFolder()) {
                        path = disk.getPath() + "/" + category.getId() + "/view/" + batch.getId() + "/" + capture.getPath();
                    } else {
                        path = disk.getPath() + "/view/" + batch.getId() + "/" + capture.getPath();
                    }
                    File file = new File(path);

                    Image img = null;
                    try {
                        img = (Image) new TIFFReader(file).getPage(0);
                    } catch (IOException ex) {
//                        
                        JOptionPane.showMessageDialog(this, "خطأ في قراءة الصورة");
                        ex.printStackTrace();
//                        Logger.getLogger(IndexingUserFrame02.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    currentImage = ImageGenerator.createBufferedImage(img);

                    currentPage = capture;
                    currentDoc = capture.getCapture();
//                    currentImage = imgLoader.getBimage();
                    //  currentImage = readImage(capture.getPath());
                    imageCanvas.setImage(currentImage);
                    imagePanel.setViewportView(imageCanvas);

                    this.zoom = Constants.ZOOM_DEFAULT;
                    imageCanvas.zoom(zoom);
                    updateZoomLBL();
                } else if (capture.getType() == Constants.DOC_TYPE) {
                    currentImage = null;
                    currentDoc = capture;
                    imageCanvas.setImage(currentImage);
                    imagePanel.setViewportView(imageCanvas);
                } else if (capture.getType() == Constants.BATCH_TYPE) {
                    currentImage = null;
                    currentDoc = null;
                    imageCanvas.setImage(currentImage);
                    imagePanel.setViewportView(imageCanvas);
                }
            } else {
                imageCanvas.setImage(null);
                imagePanel.setViewportView(imageCanvas);
            }
        }
        if (currentDoc != null) {
            loadData();
        }
    }//GEN-LAST:event_treeValueChanged

    private void prevBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevBTNActionPerformed
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
        tree.setSelectionPath(getPath(selectedNode.getPreviousNode()));
        DefaultMutableTreeNode node = selectedNode.getPreviousNode().getPreviousNode();
        if (node == null) {
            prevBTN.setEnabled(false);
        }
        nextBTN.setEnabled(true);
    }//GEN-LAST:event_prevBTNActionPerformed

    private void nextBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBTNActionPerformed
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
        tree.setSelectionPath(getPath(selectedNode.getNextNode()));
        DefaultMutableTreeNode node = selectedNode.getNextNode().getNextNode();
        if (node == null) {
            nextBTN.setEnabled(false);
        }
        prevBTN.setEnabled(true);
    }//GEN-LAST:event_nextBTNActionPerformed

    private void maxBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxBTNActionPerformed
        this.zoom += 10;
        imageCanvas.zoom(zoom);
        if (zoom == 200) {
            maxBTN.setEnabled(false);
        }
        updateZoomLBL();
        minBTN.setEnabled(true);
    }//GEN-LAST:event_maxBTNActionPerformed

    private void minBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minBTNActionPerformed
        this.zoom -= 10;
        imageCanvas.zoom(zoom);
        if (zoom == 10) {
            minBTN.setEnabled(false);
        }
        updateZoomLBL();
        maxBTN.setEnabled(true);
    }//GEN-LAST:event_minBTNActionPerformed

    private void autoBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoBTNActionPerformed
        this.zoom = Constants.ZOOM_DEFAULT;
        imageCanvas.zoom(zoom);
        updateZoomLBL();
        minBTN.setEnabled(true);
        maxBTN.setEnabled(true);
    }//GEN-LAST:event_autoBTNActionPerformed

    private void rotateLeftBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateLeftBTNActionPerformed
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
        if (selectedNode != null) {
            currentImage = ImageUtils.rotateImage(currentImage, -Constants.ROTATE_90);
            imageCanvas.setImage(currentImage);
            imageCanvas.zoom(zoom);
            imagePanel.setViewportView(imageCanvas);
        }
        rotationDirection++;
    }//GEN-LAST:event_rotateLeftBTNActionPerformed

    private void rotateRightBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateRightBTNActionPerformed
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
        if (selectedNode != null) {
            currentImage = ImageUtils.rotateImage(currentImage, Constants.ROTATE_90);
            imageCanvas.setImage(currentImage);
            imageCanvas.zoom(zoom);
            imagePanel.setViewportView(imageCanvas);
        }
        rotationDirection++;
    }//GEN-LAST:event_rotateRightBTNActionPerformed

    private void releaseBatchBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_releaseBatchBTNActionPerformed
        CaptureHome captureHome = new CaptureHome();
        try {
            currentBatch.setLocked(false);
            captureHome.updateLock(currentBatch);


            if (isIndexedException()) {
                currentBatch.setStatus(CaptureStatus.INDEX_EXCEPTION);
                captureHome.updateCaptureState(currentBatch);

            } else if (isIndexedFinish()) {
                currentBatch.setStatus(CaptureStatus.INDEX_FINISHED);
                captureHome.updateCaptureState(currentBatch);
            } else {
                currentBatch.setStatus(CaptureStatus.INDEXED);
                captureHome.updateCaptureState(currentBatch);
            }

        } catch (Exception e) {
        }
        releasResources();
//        hideFieldsPanel();
    }//GEN-LAST:event_releaseBatchBTNActionPerformed
    private boolean isIndexedException() {
        boolean yes = false;
        for (Capture doc : currentBatch.getCaptures()) {
            if (doc.getStatus() == CaptureStatus.INDEX_EXCEPTION) {
                yes = true;
                break;
            }
        }
        return yes;
    }

    private boolean isIndexedFinish() {
        boolean yes = false;
        for (Capture doc : currentBatch.getCaptures()) {
            if (doc.getStatus() != CaptureStatus.INDEX_FINISHED) {
                yes = false;
                break;
            }
        }
        return yes;
    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        System.out.println("Closing");
        releaseBatchBTNActionPerformed(null);
    }//GEN-LAST:event_formWindowClosing

    private void batchesDlgcancleBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batchesDlgcancleBTNActionPerformed
        batchesDialog.dispose();
    }//GEN-LAST:event_batchesDlgcancleBTNActionPerformed

    private void nextMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextMenuItemActionPerformed
        nextBTNActionPerformed(evt);
    }//GEN-LAST:event_nextMenuItemActionPerformed

    private void previousMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousMenuItemActionPerformed
        prevBTNActionPerformed(evt);
    }//GEN-LAST:event_previousMenuItemActionPerformed

    private void maxmizeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxmizeMenuItemActionPerformed
        maxBTNActionPerformed(evt);
    }//GEN-LAST:event_maxmizeMenuItemActionPerformed

    private void minimzeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minimzeMenuItemActionPerformed
        minBTNActionPerformed(evt);
    }//GEN-LAST:event_minimzeMenuItemActionPerformed

    private void autoFitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoFitMenuItemActionPerformed
        autoBTNActionPerformed(evt);
    }//GEN-LAST:event_autoFitMenuItemActionPerformed

    private void rotateLeftMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateLeftMenuItemActionPerformed
        rotateLeftBTNActionPerformed(evt);
    }//GEN-LAST:event_rotateLeftMenuItemActionPerformed

    private void rotateRightMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateRightMenuItemActionPerformed
        rotateLeftBTNActionPerformed(evt);
    }//GEN-LAST:event_rotateRightMenuItemActionPerformed

    private void openBatchMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openBatchMenuItemActionPerformed
        searchBTNActionPerformed(evt);
    }//GEN-LAST:event_openBatchMenuItemActionPerformed

    private void repleaseBatchMenueItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repleaseBatchMenueItemActionPerformed
        releaseBatchBTNActionPerformed(evt);
    }//GEN-LAST:event_repleaseBatchMenueItemActionPerformed

    private void exitFrameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitFrameMenuItemActionPerformed
        formWindowClosing(null);
        System.exit(0);
    }//GEN-LAST:event_exitFrameMenuItemActionPerformed

    private void acceptBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptBTNActionPerformed
        Capture document = null;
        if (currentPage != null) {
            document = currentPage.getCapture();
        } else {
            document = currentDoc;
        }
        CaptureHome captureHome = new CaptureHome();
        document.setStatus(CaptureStatus.INDEX_FINISHED);
        captureHome.updateStatus(document);
    }//GEN-LAST:event_acceptBTNActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Capture document = null;
        if (currentPage != null) {
            document = currentPage.getCapture();
        } else {
            document = currentDoc;
        }
        CaptureHome captureHome = new CaptureHome();
        document.setStatus(CaptureStatus.INDEX_EXCEPTION);
        captureHome.updateStatus(document);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void loadData() {
        DocumentDataHome ddh = new DocumentDataHome();
        List<DocumentData> docFieldData = ddh.getDocumentDataByID(currentDoc.getId());
        for (int i = 0; i < allFields.size(); i++) {
            Field field = allFields.get(i);
            for (int j = 0; j < docFieldData.size(); j++) {
                DocumentData documentData = docFieldData.get(j);
                if (field.getId().equals(documentData.getFieldId())) {
                    Component component = fieldsComponents.get(i);
                    component.setEnabled(false);
                    if (component instanceof JTextField) {
                        ((JTextField) component).setText(documentData.getFieldValue());
                    } else if (component instanceof JComboBox) {
                        ((JComboBox) component).setSelectedItem(documentData.getFieldValue());
                    }
                }
            }
        }
    }

    private void clearGUI() {
        if (fieldsComponents != null) {
            for (Component component : fieldsComponents) {
                if (component instanceof JTextField) {
                    ((JTextField) component).setText("");
                }
            }
        }
    }

    private void saveData() {
        Long doc_id = null;
        Long field_id = null;
        String field_value = null;
        // 1. get Current Doc
        Capture document = null;
        if (currentPage != null) {
            document = currentPage.getCapture();
        } else {
            document = currentDoc;
        }
        doc_id = document.getId();
        // 2. get Enabled Fileds Components
        // 3. get associated filed id
        for (int i = 0; i < allFields.size(); i++) {
            Field field = allFields.get(i);
            Component fieldComponent = fieldsComponents.get(i);
            if (fieldComponent.isVisible()) {
                field_id = field.getId();
                if (fieldComponent instanceof JTextField) {
                    field_value = ((JTextField) fieldComponent).getText();
                } else if (fieldComponent instanceof JComboBox) {
                    try {
                        field_value = ((JComboBox) fieldComponent).getSelectedItem().toString();
                    } catch (Exception x) {
                        field_value = "";
                    }
                }
                DocumentDataHome documentDataHome = new DocumentDataHome();
                DocumentData documentData = null;
                documentData = documentDataHome.getDocumentDataByDocIDandFieldID(doc_id, field_id);
                if (documentData == null) {
                    documentData = new DocumentData(0L, field_id, doc_id, field_value);
                    documentDataHome.persist(documentData);
                } else {
                    documentData.setFieldValue(field_value);
                    documentDataHome.update(documentData);
                }

                // update Batch

//                Capture batch = currentBatch.getCapture();
//                batch.setStatus(CaptureStatus.INDEXED);
//                captureHome.updateCaptureState(batch);
                // update document
                //update pages to
            }
        }
        CaptureHome captureHome = new CaptureHome();
        document.setStatus(CaptureStatus.INDEXED);
        captureHome.updateCaptureState(document);
    }

    private void updateZoomLBL() {
        zoomLBL.setText(zoom + Constants.PERCENT_TXT);
    }

    private void releasResources() {
        rootNode = new DefaultMutableTreeNode("Root");
        treeModel = new DefaultTreeModel(rootNode);
        tree.setModel(treeModel);
        tree.setSelectionPath(getPath(rootNode));
        pagesMap = new HashMap<String, Capture>();
        imageTracker = new MediaTracker(this);
        imageCanvas = new ImageCanvas();
        errorFieldsLabels = null;
        fieldsLabels = null;
        fieldsComponents = null;
        allFields = null;
        allFields = new FieldHome02().listCategoryFields(category);
        imagePanel.getVerticalScrollBar().setUnitIncrement(50);
        docDataPanel.removeAll();
        nextBTN.setEnabled(true);
        prevBTN.setEnabled(true);
        treeDS = new Tree();
        currentDoc = null;
    }

    public TreePath getPath(TreeNode node) {
        List list = new ArrayList();
        // Add all nodes to list
        while (node != null) {
            list.add(node);
            node = node.getParent();
        }
        Collections.reverse(list);
        // Convert array of nodes to TreePath
        return new TreePath(list.toArray());
    }

    public void loadSelectedBatch() {
        rootNodeDS = new Node("Root");
        treeDS.setRootElement(rootNodeDS);
        Node batchNode = new Node(currentBatch);
        rootNodeDS.addChild(batchNode);

        Set<Capture> documents = currentBatch.getCaptures();
        for (Capture document : documents) {
            Node documentNode = new Node(document);
            batchNode.addChild(documentNode);
            List<DocumentData> documentData = new DocumentDataHome02().getDocumentDataByID(document.getId());
            Collections.sort(documentData);
            Node<List<DocumentData>> documentDataNode =
                    new Node<List<DocumentData>>(documentData);
            documentNode.addChild(documentDataNode);
        }
    }

    private void createUserFolder() {
        Set<Node<Capture>> batches = rootNodeDS.getChildren();
        String path = "";
        for (Node<Capture> batchNodeDS : batches) {
            path = Constants.CLIENT_CAPTURE_FOLDER
                    + Constants.LINE_SEPARATOR + batchNodeDS.getData().getId();
            File file = new File(path);
            if (!file.exists()) {
                file.mkdirs();
            }
        }
    }

    private Image readImage(String imageName) {
        Image img = null;
        try {
            TIFFReader reader = new TIFFReader(new File(userBatchFolder + Constants.LINE_SEPARATOR + imageName));
            RenderedImage rm = reader.getPage(0);
//            ColorModel cm = rm.getColorModel();
//            System.out.println("CM "+ cm.getColorSpace().getType());
            BufferedImage bi = ImageUtils.convertRenderedImage(rm);
            img = Toolkit.getDefaultToolkit().createImage(bi.getSource());
            imageTracker.addImage(img, 0);
            imageTracker.waitForID(0);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return img;
    }

//    private void startLoading() {
//        SwingWorker sw = new SwingWorker() {
//
//            @Override
//            protected Object doInBackground() throws Exception {
//                statusLBL2.setText("loading");
//                repProtocolPath = currentBatch.getCategory().getRep().getProtocolPath()
//                        + Constants.LINE_SEPARATOR + currentBatch.getId();
//                userBatchFolder = Constants.CLIENT_CAPTURE_FOLDER
//                        + Constants.LINE_SEPARATOR + currentBatch.getId();
//                imageLoader = new ImageLoader(pagesMap, repProtocolPath, userBatchFolder);
//                imageLoader.run();
//                return null;
//            }
//
//            @Override
//            protected void done() {
//                statusLBL2.setText("Done");
//            }
//        };
//        sw.execute();
//    }
    private void updateTree() {
        treeModel = (DefaultTreeModel) tree.getModel();
        rootNode = (DefaultMutableTreeNode) treeModel.getRoot();
        rootNode.setUserObject(currentBatch);

        DefaultMutableTreeNode batchNode = new DefaultMutableTreeNode(currentBatch);
        rootNode.add(batchNode);
        for (Capture doc : currentBatch.getCaptures()) {
            batchNode.add(new CaptureTreeNode(doc, treeModel));

        }
        tree.setModel(treeModel);
        LazyLoadingTreeController controller = new LazyLoadingTreeController(treeModel);
        tree.addTreeWillExpandListener(controller);
        treeModel.reload();
    }

    private void buildFieldsPanel() {
        fieldsComponents = new ArrayList<Component>();
        fieldsLabels = new ArrayList<JLabel>();
        errorFieldsLabels = new ArrayList<JLabel>();
        for (final Field field : allFields) {
            // lable
            JLabel fieldlabel = new JLabel(field.getName() + "(" + field.getAlias() + ")");
            JLabel errorLable = new JLabel("");
            errorLable.setForeground(new Color(0, 102, 51));
            if (rightDirection) {
                fieldlabel.setHorizontalAlignment(SwingConstants.TRAILING);
            }
            fieldsLabels.add(fieldlabel);
            docDataPanel.add(fieldlabel);

            // component
            Component fieldComponent = null;
            if (field.getType().equals(Constants.VAL_STRING)) {
                fieldComponent = new JTextField();
            } else if (field.getType().equals(Constants.VAL_NUMBER)) {
                fieldComponent = new JTextField();
                fieldComponent.addFocusListener(new java.awt.event.FocusAdapter() {
                    @Override
                    public void focusLost(java.awt.event.FocusEvent evt) {
                        fieldComponentFocusLost(evt, field);
                    }
                });
                errorLable.setText("Invalid number");
            } else if (field.getType().equals(Constants.VAL_DATE)) {
                fieldComponent = new JTextField();
                fieldComponent.addFocusListener(new java.awt.event.FocusAdapter() {
                    @Override
                    public void focusLost(java.awt.event.FocusEvent evt) {
                        fieldComponentFocusLost(evt, field);
                    }
                });
                errorLable.setText(field.getDateFormat());
            } else if (field.getType().equals(Constants.VAL_BOOLEAN)) {
                fieldComponent = new JComboBox(new String[]{"Yes", "No"});
            } else if (field.getType().equals(Constants.VAL_LIST)) {
                fieldComponent = new JComboBox(field.getListData().toArray());
            }
            if (rightDirection) {
                if (fieldComponent instanceof JTextField) {
                    ((JTextField) fieldComponent).setHorizontalAlignment(SwingConstants.TRAILING);
                }
            } else if (fieldComponent instanceof JComboBox) {
                ((JComboBox) fieldComponent).setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
            }
            fieldsComponents.add(fieldComponent);
            docDataPanel.add(fieldComponent);

            if (rightDirection) {
                errorLable.setHorizontalAlignment(SwingConstants.TRAILING);
            }
            errorFieldsLabels.add(errorLable);
            docDataPanel.add(errorLable);
        }
        docDataPanel.repaint();
//        hideFieldsPanel();
    }

    private void hideFieldsPanel() {
        docDataJScrollPanel.setViewportView(null);
    }

    private void fieldComponentFocusLost(FocusEvent evt, Field field) {
        Object source = evt.getSource();
        String text = ((JTextField) source).getText();
        String message = new String();
        boolean b = false;
        if (field.getType().equals(Constants.VAL_DATE)) {
            b = isValidDate(text, field.getDateFormat());
            message = "error in date format";
        } else if (field.getType().equals(Constants.VAL_NUMBER)) {
            b = isValidNumber(text);
            message = "error in Numirc Value";
        }
        if (!b) {
            JOptionPane.showMessageDialog(this, message);
//            ((JTextField) evt.getSource()).requestFocus();

        }
    }

    private boolean isValidDate(String date, String dateFormat) {
        if (dateFormat != null) {
            if (dateFormat.contains("-")) {
                dateFormat = dateFormat.replaceAll("-", "/");
            }
        }
        if (date != null) {
            if (date.contains("-")) {
                date = date.replaceAll("-", "/");
            }
        }

        SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);
        String errorMessage = "";
        Date testDate = null;
        try {
            testDate = sdf.parse(date);
        } catch (ParseException e) {
            errorMessage = "Invalid date formate";
            System.out.println(errorMessage);
            return false;
        }
        if (!sdf.format(testDate).equals(date)) {
            errorMessage = "Invalid date formate";
            System.out.println(errorMessage);
            return false;
        }
        return true;
    }

    private boolean isValidNumber(String number) {
        try {
            float f = Float.parseFloat(number);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                try {
////                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
////                    UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
////                    UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsClassicLookAndFeel");
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//                IndexingQAFrame02 viewerFrame = new IndexingQAFrame02();
//                viewerFrame.setVisible(true);
//                SwingUtilities.updateComponentTreeUI(viewerFrame);
//            }
//        });
    }
    
    public void centerScreen() {
         
         
        Toolkit tk = Toolkit.getDefaultToolkit();
        Dimension screenSize = tk.getScreenSize();
        int screenHeight = screenSize.height;
        int screenWidth = screenSize.width;
        setSize(screenWidth, screenHeight - 20);
        setLocation(0, 0);

    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptBTN;
    private javax.swing.JButton autoBTN;
    private javax.swing.JMenuItem autoFitMenuItem;
    private javax.swing.JDialog batchesDialog;
    private javax.swing.JButton batchesDlgShowBTN;
    private javax.swing.JButton batchesDlgcancleBTN;
    private javax.swing.JPanel containerPanel;
    private javax.swing.JScrollPane docDataJScrollPanel;
    private javax.swing.JPanel docDataPanel;
    private javax.swing.JMenuItem exitFrameMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu imageMenu;
    private javax.swing.JScrollPane imagePanel;
    private javax.swing.JToolBar imageToolBar;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JMenuBar mainMenu;
    private javax.swing.JButton maxBTN;
    private javax.swing.JMenuItem maxmizeMenuItem;
    private javax.swing.JToolBar menuToolBar;
    private javax.swing.JButton minBTN;
    private javax.swing.JMenuItem minimzeMenuItem;
    private javax.swing.JButton nextBTN;
    private javax.swing.JMenuItem nextMenuItem;
    private javax.swing.JMenuItem openBatchMenuItem;
    private javax.swing.JButton prevBTN;
    private javax.swing.JMenuItem previousMenuItem;
    private javax.swing.JButton releaseBatchBTN;
    private javax.swing.JMenuItem repleaseBatchMenueItem;
    private javax.swing.JButton rotateLeftBTN;
    private javax.swing.JMenuItem rotateLeftMenuItem;
    private javax.swing.JButton rotateRightBTN;
    private javax.swing.JMenuItem rotateRightMenuItem;
    private javax.swing.JButton searchBTN;
    private javax.swing.JToolBar.Separator separator03;
    private javax.swing.JToolBar.Separator separator04;
    private javax.swing.JLabel statusLBL;
    private javax.swing.JLabel statusLBL2;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JTree tree;
    private javax.swing.JScrollPane treeScrolPan;
    private javax.swing.JSplitPane viewerSplitPan;
    private javax.swing.JList waitingToIndexBatchesList;
    private javax.swing.JLabel zoomLBL;
    // End of variables declaration//GEN-END:variables
//    private ImageLoader imageLoader;
    private MediaTracker imageTracker;
    private String repProtocolPath;
    private ImageCanvas imageCanvas;
    private DefaultMutableTreeNode rootNode;
    private DefaultTreeModel treeModel;
    private int zoom = Constants.ZOOM_DEFAULT;
    public Users currentUser;
    public Capture currentDoc;
    public Capture currentBatch;
    public Rep currentRep;
    private HashMap<String, Capture> pagesMap;
    private String userBatchFolder;
    private int rotationDirection;
    private Image currentImage;
    private Capture currentPage;
    private List<Field> allFields;
    private List<Component> fieldsComponents;
    private List<JLabel> fieldsLabels;
    private List<JLabel> errorFieldsLabels;
    private boolean rightDirection;
    private Tree treeDS;
    private Node rootNodeDS;
    private Category category;
}
