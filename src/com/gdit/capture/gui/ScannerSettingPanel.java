/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SettingPanel.java
 *
 * Created on Jul 13, 2010, 3:14:21 AM
 */
package com.gdit.capture.gui;

import SK.gnome.twain.TwainSource;
import com.gdit.capture.entity.Computers;
import com.gdit.capture.entity.ComputersHome;
//import com.gdit.capture.service.SyncFiles;
//import com.gdit.capture.service.SyncFilesService;
import com.gdit.capture.entity.Scanner;
import com.gdit.capture.entity.ScannerHome;
import com.jidesoft.utils.Base64.InputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author bahy
 */
public class ScannerSettingPanel extends javax.swing.JPanel {
    private HashMap<String, String> capMap;

    /** Creates new form SettingPanel */
    public ScannerSettingPanel() {
        initComponents();
        init();
        showSetting();
    }

    private void init() {
        try {
//            MorenaCapabilities morenaCapabilities = new MorenaCapabilities(this);
//            source = (TwainSource) morenaCapabilities.getSource();
//            jCheckBox1.setSelected(source.getAutoFeed());
//            morenaCapabilities.close();
            ComputersHome compDao = new ComputersHome();
            List<Computers> computers = compDao.getAllComputers();
            DefaultComboBoxModel computersModel = new DefaultComboBoxModel();
            computersModel.addElement("");
            for(Computers comp:computers){
                computersModel.addElement(comp.getName()); 
            }
            cboComputers.setModel(computersModel);
        } catch (Exception ex) {
            Logger.getLogger(ScannerSettingPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        chkADF = new javax.swing.JCheckBox();
        dpiText = new javax.swing.JTextField();
        comboColor = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        comboSize = new javax.swing.JComboBox();
        chkDuplex = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        comboBitDepth = new javax.swing.JComboBox();
        buttonSave = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        cboComputers = new javax.swing.JComboBox();
        chkAutoBright = new javax.swing.JCheckBox();
        chkAutoDeskw = new javax.swing.JCheckBox();
        chkAutoBorder = new javax.swing.JCheckBox();
        chkAutoRotate = new javax.swing.JCheckBox();
        chkBarcode = new javax.swing.JCheckBox();
        chkVisible = new javax.swing.JCheckBox();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Scanner Setting"));

        jLabel2.setText("DPI");

        jLabel3.setText("Color");

        chkADF.setText("ADF");
        chkADF.setName("adfChk"); // NOI18N
        chkADF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkADFActionPerformed(evt);
            }
        });

        dpiText.setName("dpiText"); // NOI18N

        comboColor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "BW", "GRAY", "RGB", "PALLETE" }));
        comboColor.setName("colorCbo"); // NOI18N
        comboColor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                colorComboChanged(evt);
            }
        });

        jLabel4.setText("Size");

        comboSize.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Auto", "A4LETTER", "A3" }));
        comboSize.setName("sizeCbo"); // NOI18N

        chkDuplex.setText("Duplex");

        jLabel7.setText("Bit Depth");

        comboBitDepth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "8", "24" }));

        buttonSave.setText("Save");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });

        jLabel5.setText("Computer Name");

        chkAutoBright.setText("Auto Bright");

        chkAutoDeskw.setText("Auto Deskw");

        chkAutoBorder.setText("Auto Border");

        chkAutoRotate.setText("Auto Rotate");

        chkBarcode.setText("Barcode Detection");

        chkVisible.setText("Visible");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cboComputers, 0, 211, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(87, 87, 87)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(chkADF, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                                    .addComponent(chkDuplex, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                                    .addComponent(chkAutoRotate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(chkAutoDeskw, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(chkAutoBorder, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(chkVisible))
                                    .addComponent(chkAutoBright))
                                .addGap(13, 13, 13)))
                        .addGap(2, 2, 2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(chkBarcode))
                    .addComponent(jLabel7)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dpiText, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(comboBitDepth, 0, 223, Short.MAX_VALUE)
                                .addComponent(comboSize, 0, 223, Short.MAX_VALUE)
                                .addComponent(comboColor, 0, 223, Short.MAX_VALUE))))
                    .addComponent(jLabel4)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(buttonSave)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(83, 83, 83))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cboComputers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chkADF, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkAutoBright))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkAutoDeskw)
                    .addComponent(chkDuplex))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkAutoBorder)
                    .addComponent(chkAutoRotate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkBarcode)
                    .addComponent(chkVisible))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(dpiText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(comboBitDepth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(comboSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(buttonSave)
                .addGap(90, 90, 90))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void chkADFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkADFActionPerformed
        // TODO add your handling code here:
        try {
        } catch (Exception ex) {
            Logger.getLogger(ScannerSettingPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_chkADFActionPerformed

    private void showSetting() {
        try {
             ScannerHome scanHome = new ScannerHome();
             List<Scanner> scanners = scanHome.getAllCaps();
             capMap = new HashMap<String, String>();
            for (Scanner cap : scanners) {
                capMap.put(cap.getCapName(), cap.getCapValue());
            }
            chkADF.setSelected(Boolean.valueOf(capMap.get("AutoFeed")));
            chkDuplex.setSelected(Boolean.valueOf(capMap.get("DuplexEnabled")));
            dpiText.setText(capMap.get("XResolution"));
            comboColor.setSelectedItem(capMap.get("PixelType"));
            comboSize.setSelectedItem(capMap.get("SupportedSizes"));
            comboBitDepth.setSelectedItem(capMap.get("BitDepth"));
            chkVisible.setSelected(Boolean.valueOf(capMap.get("Visible")));
            chkAutoRotate.setSelected(Boolean.valueOf(capMap.get("AutoRotate")));
            chkAutoDeskw.setSelected(Boolean.valueOf(capMap.get("AutoDeskw")));
            chkAutoBright.setSelected(Boolean.valueOf(capMap.get("AutoBright")));
            chkAutoBorder.setSelected(Boolean.valueOf(capMap.get("AutoBorder")));
            chkBarcode.setSelected(Boolean.valueOf(capMap.get("Barcode")));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        finally{
            ScannerHome.close();
        }
    }

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        // TODO add your handling code here:
        scannerSetting = new java.util.Properties();
//        chkADF.setSelected(Boolean.valueOf("AutoFeed")) ;
//        chkDuplex.setSelected(Boolean.valueOf("DuplexEnabled")) ;
        //    scannerSetting.setProperty("AutoScan", "false");
        scannerSetting.setProperty("XResolution", dpiText.getText());
        scannerSetting.setProperty("YResolution", dpiText.getText());
        scannerSetting.setProperty("PixelType", comboColor.getSelectedItem().toString());//GRAY RGB  PALLETE
        scannerSetting.setProperty("SupportedSizes", comboSize.getSelectedItem().toString());//
        scannerSetting.setProperty("BitDepth", comboBitDepth.getSelectedItem().toString());
        scannerSetting.setProperty("Indicators",""+ chkVisible.isSelected());
        scannerSetting.setProperty("AutoRotate", ""+chkAutoRotate.isSelected());
        scannerSetting.setProperty("AutoDeskw", ""+chkAutoDeskw.isSelected());
        scannerSetting.setProperty("AutoBright", ""+chkAutoBright.isSelected());
        scannerSetting.setProperty("AutoBorder", ""+chkAutoBorder.isSelected());
        scannerSetting.setProperty("Barcode", ""+chkBarcode.isSelected());
        scannerSetting.setProperty("Visible", ""+chkVisible.isSelected());
        scannerSetting.setProperty("AutoFeed", ""+chkADF.isSelected());
        scannerSetting.setProperty("Duplex", ""+chkDuplex.isSelected());

        int index = 1;
        for(Object key:scannerSetting.keySet()){
            ScannerHome scanHome = new ScannerHome();

            Scanner scanner = new Scanner();

            scanner.setId(index++);
            scanner.setCapName(key.toString());
            scanner.setCapValue(scannerSetting.getProperty(key.toString()));
            scanHome.attachDirty(scanner);
            scanHome.commit();
            scanHome.close();
        }
        
        //Bw 1
        // GREY 4 8
        //RGB   8
        //PALLETE   4  8
        FileOutputStream os = null;
        try {
            File file = new File("scanner.properties");
            file.createNewFile();
            os = new FileOutputStream(file);
            scannerSetting.store(os, "");
            os.flush();
            os.close();
//            SyncFilesService service = new SyncFilesService();
  //          SyncFiles port = service.getSyncFilesPort();
          //  HashMap hm = new HashMap();
  //          port.changeScannerSetting(getFinput("scanner.properties"),cboComputers.getSelectedItem().toString());
            JOptionPane.showMessageDialog(this,"تم الحفظ بنجاح");
            clear();
        } catch (Exception ex) {
            Logger.getLogger(ScannerSettingPanel.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                os.flush();
                os.close();
                ScannerHome.close();
            } catch (Exception ex) {
                Logger.getLogger(ScannerSettingPanel.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_buttonSaveActionPerformed

    private byte[] getFinput(String path) {

        File file = new File(path);

        try {
            FileInputStream fin = new FileInputStream(file);
            byte fileContent[] = new byte[(int) file.length()];
            fin.read(fileContent);
            return fileContent;
        } catch (FileNotFoundException e) {
            System.out.println("File not found" + e);
            return null;
        } catch (IOException ioe) {
            System.out.println("Exception while reading the file " + ioe);
            return null;
        }
    }

    private void colorComboChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_colorComboChanged
        // TODO add your handling code here:
        if (evt.getItem().equals("BW")) {
            DefaultComboBoxModel model = new DefaultComboBoxModel();
            model.addElement("1");
            comboBitDepth.setModel(model);
        } else if (evt.getItem().equals("GRAY")) {
            DefaultComboBoxModel model = new DefaultComboBoxModel();
            model.addElement("4");
            model.addElement("8");
            comboBitDepth.setModel(model);

        } else if (evt.getItem().equals("RGB")) {
            DefaultComboBoxModel model = new DefaultComboBoxModel();
            model.addElement("8");
            comboBitDepth.setModel(model);
        } else if (evt.getItem().equals("PALLETE")) {
            DefaultComboBoxModel model = new DefaultComboBoxModel();
            model.addElement("4");
            model.addElement("8");
            comboBitDepth.setModel(model);
        } else {
            DefaultComboBoxModel model = new DefaultComboBoxModel();
            // model.addElement("1");
            comboBitDepth.setModel(model);

        }
    }//GEN-LAST:event_colorComboChanged

    public static void main(String[] args) {
        JFrame frame = new JFrame();
        ScannerSettingPanel panel = new ScannerSettingPanel();
        frame.setSize(400, 400);
        frame.getContentPane().add(panel);
        frame.setVisible(true);
    }

    public String makeFileNameValid(String string) {
        StringBuffer s = new StringBuffer();
        for (int i = 0; i < string.length(); i++) {
            Character ch = string.charAt(i);
            if (Character.isJavaIdentifierPart(ch)) {
                s.append(ch);
            }
        }
        return s.toString();
    }

    public JFrame getFrame() {
        return frame;
    }

    public void setFrame(JFrame frame) {
        this.frame = frame;
    }
    private TwainSource source;
    private JFrame frame;
    //  protected Properties properties;
    protected String sourceName;
    protected String sourceValidFileName;
    private Properties scannerSetting;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonSave;
    private javax.swing.JComboBox cboComputers;
    private javax.swing.JCheckBox chkADF;
    private javax.swing.JCheckBox chkAutoBorder;
    private javax.swing.JCheckBox chkAutoBright;
    private javax.swing.JCheckBox chkAutoDeskw;
    private javax.swing.JCheckBox chkAutoRotate;
    private javax.swing.JCheckBox chkBarcode;
    private javax.swing.JCheckBox chkDuplex;
    private javax.swing.JCheckBox chkVisible;
    private javax.swing.JComboBox comboBitDepth;
    private javax.swing.JComboBox comboColor;
    private javax.swing.JComboBox comboSize;
    private javax.swing.JTextField dpiText;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    // End of variables declaration//GEN-END:variables

    private void clear() {
//       chkADF.setSelected(false);
//       chkDuplex.setSelected(false);
//       cboComputers.setSelectedItem("");
//       dpiText.setText("");
    }
}
