package com.gdit.capture.entity;
// Generated 13/10/2010 04:34:03 ï¿½ by Hibernate Tools 3.2.0.beta7

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import org.hibernate.Session;
import org.hibernate.HibernateException;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
import org.hibernate.Query;

/**
 * Capture generated by hbm2java
 */
public class Capture implements java.io.Serializable {

    // Fields
    private long id;
    private Users users;
    private Category category;
    //   private Capture captureByUserId;
    private Capture capture;
    private int type;
    private String name;
    private String path;
    private String barcode;
    private boolean deleted;
    private boolean saved;
    private int status;
    private Integer copyStatus;
    private boolean locked;
    private Date createdDate;
    private boolean refused;
    private String refuseNote;
    private Disk disk;
    private Computers computer;
    private boolean barcoded;
    private boolean blancked;
    private Rep rep;
    // private Set capturesForUserId = new HashSet(0);
    private Set captures = new HashSet(0);

    // Constructors
    /**
     * default constructor
     */
    public Capture() {
    }

    /**
     * minimal constructor
     */
    public Capture(long id) {
        this.id = id;
    }

    /**
     * full constructor
     */
    public Capture(long id, Users users, Category category, Capture captureByUserId, Capture captureByParentId, Short type, String name, String path, Boolean deleted, Boolean saved, int status, Set capturesForUserId, Set capturesForParentId) {
        this.id = id;
        this.users = users;
        this.category = category;
        //   this.captureByUserId = captureByUserId;
        this.capture = captureByParentId;
        this.type = type;
        this.name = name;
        this.path = path;
        this.deleted = deleted;
        this.saved = saved;
        this.status = status;
//        this.capturesForUserId = capturesForUserId;
        this.captures = capturesForParentId;
    }

//    public static Session getSession() {
//        Session session = (Session) Capture.session.get();
//        if (session == null) {
//            session = sessionFactory.openSession();
//            Capture.session.set(session);
//        }
//        return session;
//    }
//
//    public void persist(Capture transientInstance) {
//        //  log.log(Level.WARNING, "persisting Capture instance");
//        try {
//            begin();
//
//            //  transientInstance.setId(getMaxID() + 1);
//            getSession().save(transientInstance);
//            commit();
//            //      log.log(Level.WARNING, "persist successful");
//
//        } catch (RuntimeException re) {
//            //     log.log(Level.WARNING, "persist failed", re);
//            throw re;
//        }
//    }
//
//    public long persistImage(Capture transientInstance) {
//        // log.log(Level.WARNING, "persisting Capture instance");
//        try {
//            begin();
//
//
//            long c = (Long) getSession().save(transientInstance);
//
//            commit();
//            return c;
//            //    log.log(Level.WARNING, "persist successful");
//
//        } catch (RuntimeException re) {
//            //  log.log(Level.WARNING, "persist failed", re);
//            throw re;
//        }
//    }
//
//    public long persistDoc(Capture transientInstance) {
//        //  log.log(Level.WARNING, "persisting Capture instance");
//        try {
//            begin();
//
//            //  transientInstance.setId(getMaxID() + 1);
//            getSession().save(transientInstance);
//            commit();
//            return transientInstance.getId();
//            //      log.log(Level.WARNING, "persist successful");
//
//        } catch (RuntimeException re) {
//            //     log.log(Level.WARNING, "persist failed", re);
//            throw re;
//        }
//    }
//
//    public void deleteImage(Capture parent, String name) {
//        try {
//            begin();
//            getSession().createQuery("delete from Capture c where c.capture = :parent AND c.name = :name").setParameter("parent", parent).setParameter("name", name).executeUpdate();
//            commit();
//            //  log.log(Level.WARNING, "persist successful");
//
//        } catch (RuntimeException re) {
//            // log.log(Level.WARNING, "persist failed", re);
//            throw re;
//        }
//    }
//
//    public void begin() {
//        getSession().beginTransaction();
//    }
//
//    public void commit() {
//        getSession().getTransaction().commit();
//    }
//
//    public long getMaxID() {
//        Query q = getSession().createQuery("select MAX(c.id) from Capture c");
//
//        if (q.list().get(0) != null) {
//            return (Long) q.list().get(0);
//        } else {
//            return 0;
//        }
//    }
//
//    public void rollback() {
//        try {
//            getSession().getTransaction().rollback();
//        } catch (HibernateException e) {
//            //    log.log(Level.WARNING, "Cannot rollback", e);
//        }
//
//        try {
//            getSession().close();
//        } catch (HibernateException e) {
//            //   log.log(Level.WARNING, "Cannot close", e);
//        }
//        Capture.session.set(null);
//    }
//
//    public static void close() {
//        getSession().close();
//        Capture.session.set(null);
//    }
//
//    public Capture merge(Capture detachedInstance) {
//        //  log.log(Level.WARNING, "merging Capture instance");
//        try {
//            Capture result = (Capture) sessionFactory.getCurrentSession().merge(detachedInstance);
//            //     log.log(Level.WARNING, "merge successful");
//            return result;
//        } catch (RuntimeException re) {
//            //     log.log(Level.WARNING, "merge failed", re);
//            throw re;
//        }
//    }
//
//    public void attachDirty(Capture instance) {
//        //  log.log(Level.WARNING, "attaching dirty Capture instance");
//        try {
//            begin();
//            getSession().saveOrUpdate(instance);
//            commit();
//            //      log.log(Level.WARNING, "attach successful");
//        } catch (RuntimeException re) {
//            //     log.log(Level.WARNING, "attach failed", re);
//            re.printStackTrace();
//            throw re;
//        }
//    }

    // Property accessors
    public long getId() {
        return this.id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public Users getUsers() {
        return this.users;
    }

    public String getBarcode() {
        return barcode;
    }

    public void setBarcode(String barcode) {
        this.barcode = barcode;
    }

    public void setUsers(Users users) {
        this.users = users;
    }

    public Category getCategory() {
        return this.category;
    }

    public void setCategory(Category category) {
        this.category = category;
    }

//    public Capture getCaptureByUserId() {
//        return this.captureByUserId;
//    }
//
//    public void setCaptureByUserId(Capture captureByUserId) {
//        this.captureByUserId = captureByUserId;
//    }
    public Capture getCapture() {
        return this.capture;
    }

    public void setCapture(Capture capture) {
        this.capture = capture;
    }

    public int getType() {
        return this.type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPath() {
        return this.path;
    }

    public void setPath(String path) {
        this.path = path;
    }

    public boolean getDeleted() {
        return this.deleted;
    }

    public void setDeleted(boolean deleted) {
        this.deleted = deleted;
    }

    public boolean getSaved() {
        return this.saved;
    }

    public void setSaved(boolean saved) {
        this.saved = saved;
    }

    public int getStatus() {
        return this.status;
    }

    public void setStatus(int status) {
        this.status = status;
    }

    public boolean getLocked() {
        return locked;
    }

    public void setLocked(boolean locked) {
        this.locked = locked;
    }

    public String getRefuseNote() {
        return refuseNote;
    }

    public void setRefuseNote(String refuseNote) {
        this.refuseNote = refuseNote;
    }

//    public Set getCapturesForUserId() {
//        return this.capturesForUserId;
//    }
    public Date getCreatedDate() {
        return createdDate;
    }

    public void setCreatedDate(Date createdDate) {
        this.createdDate = createdDate;
    }

//    public void setCapturesForUserId(Set capturesForUserId) {
//        this.capturesForUserId = capturesForUserId;
//    }
    public Integer getCopyStatus() {
        return copyStatus;
    }

    public void setCopyStatus(Integer copyStatus) {
        this.copyStatus = copyStatus;
    }

    public boolean isRefused() {
        return refused;
    }

    public void setRefused(boolean refused) {
        this.refused = refused;
    }

    public Set<Capture> getCaptures() {
        return this.captures;
    }

    public void setCaptures(Set capturesForParentId) {
        this.captures = capturesForParentId;
    }

    public Boolean getRefused() {
        return refused;
    }

    public void setRefused(Boolean refused) {
        this.refused = refused;
    }

    public Disk getDisk() {
        return disk;
    }

    public void setDisk(Disk disk) {
        this.disk = disk;
    }

    public boolean isBarcoded() {
        return barcoded;
    }

    public void setBarcoded(boolean barcoded) {
        this.barcoded = barcoded;
    }

    public Rep getRep() {
        return rep;
    }

    public void setRep(Rep rep) {
        this.rep = rep;
    }

    public boolean isBlancked() {
        return blancked;
    }

    public void setBlancked(boolean blancked) {
        this.blancked = blancked;
    }
     
    

    
    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Capture other = (Capture) obj;
        if (this.id != other.id) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 37 * hash + (int) (this.id ^ (this.id >>> 32));
        return hash;
    }

    @Override
    public String toString() {
        if(type==2 ){
            return barcode==null?name:barcode;
        }
       else if (name != null && name.endsWith("")) {
            return name;
        } else {
            return id + "";
        }
    }

    public Computers getComputer() {
        return computer;
    }

    public void setComputer(Computers computer) {
        this.computer = computer;
    }
    
//    public Date getSysDate() {
//        try {
//            // TODO solve status to 6;
//            begin();
//            Date date = (Date) getSession().createSQLQuery("select SYSDATE from dual ")
//                    .list().get(0);
//            return date;
//        } catch (RuntimeException re) {
//            //     log.log(Level.WARNING, "get failed", re);
//            throw re;
//        }
//    }
//    
//    private static final ThreadLocal<Session> session = new ThreadLocal<Session>();
//    private static final SessionFactory sessionFactory = new Configuration().configure().buildSessionFactory();
}
