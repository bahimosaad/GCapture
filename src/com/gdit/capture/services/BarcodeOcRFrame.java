/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gdit.capture.services;

import com.gdit.capture.entity.Capture;
import com.gdit.capture.entity.CaptureHome;
import com.gdit.capture.entity.Disk;
import com.gdit.capture.entity.DiskHome;
import java.io.File;
import java.util.List;
import javax.print.attribute.standard.OutputDeviceAssigned;
import javax.swing.JFrame;
import net.sourceforge.tess4j.Tesseract;
import org.tempuri.CompressToTiff;

/**
 *
 * @author Administrator
 */
public class BarcodeOcRFrame extends javax.swing.JFrame {

    /**
     * Creates new form BarcodeOcRFrame
     */
    public BarcodeOcRFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        output.setColumns(20);
        output.setRows(5);
        jScrollPane1.setViewportView(output);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 426, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BarcodeOcRFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BarcodeOcRFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BarcodeOcRFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BarcodeOcRFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                BarcodeOcRFrame frame = new BarcodeOcRFrame();
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.setVisible(true);
                frame.ocr();
            }
        });
    }

    private void ocr() {
        try {
            CaptureHome dao = new CaptureHome();
            com.gdit.capture.run.ReadBarcode reader = new com.gdit.capture.run.ReadBarcode();
            DiskHome diskDao = new DiskHome();
            Disk disk = diskDao.getAllDisk().get(0);

            while (true) {
                List<Capture> batches = dao.getUnBarcoded();
                for (Capture batch : batches) {

                    List<Capture> pages = dao.getBatchPages(batch);
                    batch.setBarcoded(true);
                    dao.attachDirty(batch);
                    if (pages.isEmpty() || batch.getComputer() == null || batch.getDisk() == null) {
                        continue;
                    }
                    Capture first = pages.get(0);
                    // System.out.println(batch.getId());
                    File imgFile = new File(batch.getDisk().getPath() + "/scan/"
                            + batch.getId() + "//" + first.getPath());
                    File viewFile = new File(batch.getDisk().getViewPath() + "/view/"
                            + batch.getId() + "//" + first.getPath());
                    if (viewFile.exists()) {
                        String barcode = "";
//                        barcode = reader.scanBarcode(imgFile);
//                        if (!barcode.equals("")) {
//                            Capture doc = (Capture) batch.getCaptures().toArray()[0];
//                            doc.setName(barcode.trim());
//                            doc.setBarcode(barcode.trim());
//                            dao.attachDirty(doc);
//                            continue;
//                        }
                        String result = Tesseract.getInstance().doOCR(imgFile);
                        String[] splits = result.split("\\n");
                        if (splits[0].length() > 14) {
                            continue;
                        }
                        barcode = splits[0].replaceAll("\\s", "");
//                        for (String split : splits) {
//                            String str = split.trim();
//                            if (isLong(str)) {
//                                barcode = str;
//                                break;
//                            }
//                        }


                        //   if (isLong(barcode)) {
                        Capture doc = (Capture) batch.getCaptures().toArray()[0];
                        doc.setName(barcode.trim());
                        doc.setBarcode(barcode.trim());
                        dao.attachDirty(doc);
                        // System.out.println(batch.getId() + "      " + barcode);
                        
                        output.append("\n" + batch.getId() + "      " + barcode);
                        //   }

                    }
//                    else {
//                        File from = new File("\\\\" + batch.getComputer().getName() + "\\141\\" + batch.getId());
//                        File to = new File(batch.getDisk().getPath() + "\\" + batch.getId());
//                        File tof = new File(batch.getDisk().getViewPath() + "\\" + batch.getId());
//                        if (!to.exists() || to.list() == null || to.list().length <= 1) {
//                            org.apache.commons.io.FileUtils.copyDirectory(from, to);
//                            CompressToTiff service = new CompressToTiff();
//                            service.getCompressToTiffSoap().compressFolderFullPath(disk.getPath() + "/" + batch.getId(),
//                                    disk.getViewPath() + "/" + batch.getId());
//
//                            String result = Tesseract.getInstance().doOCR(imgFile);
//                            String[] splits = result.split("\\n");
//                            if (splits[0].length() > 14) {
//                                continue;
//                            }
//                            String barcode = splits[0].replaceAll("\\s", "");
//
//                            //   if (isLong(barcode)) {
//                            Capture doc = (Capture) batch.getCaptures().toArray()[0];
//                            doc.setName(barcode.trim());
//                            doc.setBarcode(barcode.trim());
//                            dao.attachDirty(doc);
////                            System.out.println(batch.getId() + "      " + barcode);
//                            
//                            output.append("\n" + batch.getId() + "      " + barcode);
//                            //}
//                        } else if (!tof.exists() || tof.list() == null || tof.list().length <= 1) {
//                            CompressToTiff service = new CompressToTiff();
//                            service.getCompressToTiffSoap().compressFolderFullPath(disk.getPath() + "/" + batch.getId(),
//                                    disk.getViewPath() + "/" + batch.getId());
//
//                            String result = Tesseract.getInstance().doOCR(imgFile);
//                            String[] splits = result.split("\\n");
//                            if (splits[0].length() > 12) {
//                                continue;
//                            }
//                            String barcode = splits[0].replaceAll("\\s", "");
//
//                            //   if (isLong(barcode)) {
//                            Capture doc = (Capture) batch.getCaptures().toArray()[0];
//                            doc.setName(barcode.trim());
//                            doc.setBarcode(barcode.trim());
//                            dao.attachDirty(doc);
//                            // System.out.println(batch.getId() + "      " + barcode);
//                            String text = output.getText();
//                            output.append("\n" + batch.getId() + "      " + barcode);
//                            //  }
//                        }
//                    }
                }
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            CaptureHome.close();
            DiskHome.close();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea output;
    // End of variables declaration//GEN-END:variables
}
