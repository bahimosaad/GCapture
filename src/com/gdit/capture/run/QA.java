/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * IndexingUserFrame02.java
 *
 * Created on Nov 5, 2010, 2:44:33 PM
 */
package com.gdit.capture.run;

import com.indexing.user.view.*;
import com.asprise.util.tiff.TIFFReader;
import com.gdit.capture.entity.Capture;
import com.gdit.capture.entity.CaptureHome;
import com.gdit.capture.entity.DocumentData;
import com.gdit.capture.entity.DocumentDataHome;
import com.gdit.capture.entity.DocumentDataHome02;
import com.gdit.capture.entity.Field;
import com.gdit.capture.entity.FieldHome02;
import com.gdit.capture.entity.Rep;
import com.gdit.capture.entity.RepHome;
import com.gdit.capture.entity.Users;
import com.gdit.capture.model.CaptureStatus;
import com.gdit.gui.SharedGUIMethods;
import com.gdit.image.ImageLoader;
import com.indexing.Constants;
import com.indexing.ImageCanvas;
//import com.indexing.ImageLoader;
import com.indexing.ImageUtils;
import com.indexing.Node;
import com.indexing.Tree;
import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Image;
import java.awt.MediaTracker;
import java.awt.Toolkit;
import java.awt.event.FocusEvent;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import java.io.File;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import javax.swing.UIManager;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

/**
 *
 * @author ehab
 */
public class QA extends javax.swing.JFrame {

    /** Creates new form IndexingUserFrame02 */
    public QA() {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
        }
        preInitComponents();
        initComponents();
        postInitComponents();
    }

    private void preInitComponents() {
        imageCanvas = new ImageCanvas();
    }

    private void postInitComponents() {
        releasResources();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        batchesDialog = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        batchesDlgcancleBTN = new javax.swing.JButton();
        batchesDlgShowBTN = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        waitingToIndexBatchesList = new javax.swing.JList();
        menuToolBar = new javax.swing.JToolBar();
        searchBTN = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        refuseButton = new javax.swing.JButton();
        indexButton = new javax.swing.JButton();
        rotate90Button = new javax.swing.JButton();
        rotate90Left = new javax.swing.JButton();
        zoominButton = new javax.swing.JButton();
        zoomoutButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        releaseButton = new javax.swing.JButton();
        createDocButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        selectCategoryButton = new javax.swing.JButton();
        barcodeButton = new javax.swing.JButton();
        statusPanel = new javax.swing.JPanel();
        statusLBL = new javax.swing.JLabel();
        statusLBL2 = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        treeScrolPan = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();
        containerPanel = new javax.swing.JPanel();
        viewerSplitPan = new javax.swing.JSplitPane();
        imagePanel = new javax.swing.JScrollPane();
        docDataJScrollPanel = new javax.swing.JScrollPane();
        docDataPanel = new javax.swing.JPanel();
        imageToolBar = new javax.swing.JToolBar();
        separator03 = new javax.swing.JToolBar.Separator();
        separator04 = new javax.swing.JToolBar.Separator();
        mainMenu = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openBatchMenuItem = new javax.swing.JMenuItem();
        repleaseBatchMenueItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        saveDocMenueItem = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        exitFrameMenuItem = new javax.swing.JMenuItem();
        imageMenu = new javax.swing.JMenu();
        nextMenuItem = new javax.swing.JMenuItem();
        previousMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        maxmizeMenuItem = new javax.swing.JMenuItem();
        minimzeMenuItem = new javax.swing.JMenuItem();
        autoFitMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        rotateLeftMenuItem = new javax.swing.JMenuItem();
        rotateRightMenuItem = new javax.swing.JMenuItem();

        jLabel2.setText("Batchs");
        batchesDialog.getContentPane().add(jLabel2, java.awt.BorderLayout.PAGE_START);

        batchesDlgcancleBTN.setText("Cancle");
        batchesDlgcancleBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batchesDlgcancleBTNActionPerformed(evt);
            }
        });
        jPanel1.add(batchesDlgcancleBTN);

        batchesDlgShowBTN.setText("Show");
        batchesDlgShowBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batchesDlgShowBTNActionPerformed(evt);
            }
        });
        jPanel1.add(batchesDlgShowBTN);

        batchesDialog.getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        waitingToIndexBatchesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        waitingToIndexBatchesList.setToolTipText("batchs");
        jScrollPane1.setViewportView(waitingToIndexBatchesList);

        batchesDialog.getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Indexing");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        menuToolBar.setRollover(true);

        searchBTN.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/gdit/resources/icons/search32_a.png"))); // NOI18N
        searchBTN.setText("Open Batch");
        searchBTN.setFocusable(false);
        searchBTN.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        searchBTN.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBTNActionPerformed(evt);
            }
        });
        menuToolBar.add(searchBTN);
        menuToolBar.add(jSeparator1);

        refuseButton.setText("رفض");
        refuseButton.setFocusable(false);
        refuseButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        refuseButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        menuToolBar.add(refuseButton);

        indexButton.setText("موافقة");
        indexButton.setFocusable(false);
        indexButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        indexButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        menuToolBar.add(indexButton);

        rotate90Button.setText("تدوير لليمين 90");
        rotate90Button.setFocusable(false);
        rotate90Button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rotate90Button.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        menuToolBar.add(rotate90Button);

        rotate90Left.setText("تدور يسار 90");
        rotate90Left.setFocusable(false);
        rotate90Left.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rotate90Left.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        menuToolBar.add(rotate90Left);

        zoominButton.setText("تصغير");
        zoominButton.setFocusable(false);
        zoominButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoominButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        menuToolBar.add(zoominButton);

        zoomoutButton.setText("تكبير");
        zoomoutButton.setFocusable(false);
        zoomoutButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomoutButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        menuToolBar.add(zoomoutButton);

        deleteButton.setText("حذف");
        deleteButton.setFocusable(false);
        deleteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        menuToolBar.add(deleteButton);

        releaseButton.setText("تحرير حزمة");
        releaseButton.setFocusable(false);
        releaseButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        releaseButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        menuToolBar.add(releaseButton);

        createDocButton.setText("انشاء معاملة");
        createDocButton.setFocusable(false);
        createDocButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        createDocButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        menuToolBar.add(createDocButton);

        saveButton.setText("حفظ");
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        menuToolBar.add(saveButton);

        selectCategoryButton.setText("اختيار فئة");
        selectCategoryButton.setFocusable(false);
        selectCategoryButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        selectCategoryButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        menuToolBar.add(selectCategoryButton);

        barcodeButton.setText("باركود");
        barcodeButton.setFocusable(false);
        barcodeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        barcodeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        menuToolBar.add(barcodeButton);

        getContentPane().add(menuToolBar, java.awt.BorderLayout.PAGE_START);

        statusPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        statusPanel.setLayout(new java.awt.BorderLayout());

        statusLBL.setText("status");
        statusPanel.add(statusLBL, java.awt.BorderLayout.CENTER);

        statusLBL2.setText("status 2");
        statusPanel.add(statusLBL2, java.awt.BorderLayout.LINE_END);

        getContentPane().add(statusPanel, java.awt.BorderLayout.PAGE_END);

        jSplitPane1.setDividerLocation(150);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Root");
        tree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        tree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treeValueChanged(evt);
            }
        });
        treeScrolPan.setViewportView(tree);

        jSplitPane1.setLeftComponent(treeScrolPan);

        containerPanel.setLayout(new java.awt.BorderLayout());

        viewerSplitPan.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        viewerSplitPan.setResizeWeight(0.75);

        imagePanel.setBorder(null);
        viewerSplitPan.setLeftComponent(imagePanel);

        docDataPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("doc data"));
        docDataPanel.setLayout(new java.awt.GridLayout(0, 3));
        docDataJScrollPanel.setViewportView(docDataPanel);

        viewerSplitPan.setRightComponent(docDataJScrollPanel);

        containerPanel.add(viewerSplitPan, java.awt.BorderLayout.CENTER);

        imageToolBar.setRollover(true);
        imageToolBar.add(separator03);
        imageToolBar.add(separator04);

        containerPanel.add(imageToolBar, java.awt.BorderLayout.NORTH);

        jSplitPane1.setRightComponent(containerPanel);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");

        openBatchMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openBatchMenuItem.setText("Open batch");
        openBatchMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openBatchMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openBatchMenuItem);

        repleaseBatchMenueItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        repleaseBatchMenueItem.setText("Release batch");
        repleaseBatchMenueItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repleaseBatchMenueItemActionPerformed(evt);
            }
        });
        fileMenu.add(repleaseBatchMenueItem);
        fileMenu.add(jSeparator4);

        saveDocMenueItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveDocMenueItem.setText("Save Document");
        saveDocMenueItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDocMenueItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveDocMenueItem);
        fileMenu.add(jSeparator5);

        exitFrameMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitFrameMenuItem.setText("Exit");
        exitFrameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitFrameMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitFrameMenuItem);

        mainMenu.add(fileMenu);

        imageMenu.setText("Image");

        nextMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        nextMenuItem.setText("Next");
        nextMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextMenuItemActionPerformed(evt);
            }
        });
        imageMenu.add(nextMenuItem);

        previousMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        previousMenuItem.setText("Previous");
        previousMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousMenuItemActionPerformed(evt);
            }
        });
        imageMenu.add(previousMenuItem);
        imageMenu.add(jSeparator2);

        maxmizeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ADD, java.awt.event.InputEvent.CTRL_MASK));
        maxmizeMenuItem.setText("Maxmize");
        maxmizeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxmizeMenuItemActionPerformed(evt);
            }
        });
        imageMenu.add(maxmizeMenuItem);

        minimzeMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_SUBTRACT, java.awt.event.InputEvent.CTRL_MASK));
        minimzeMenuItem.setText("Minimize");
        minimzeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minimzeMenuItemActionPerformed(evt);
            }
        });
        imageMenu.add(minimzeMenuItem);

        autoFitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_0, java.awt.event.InputEvent.CTRL_MASK));
        autoFitMenuItem.setText("Auto fit");
        autoFitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoFitMenuItemActionPerformed(evt);
            }
        });
        imageMenu.add(autoFitMenuItem);
        imageMenu.add(jSeparator3);

        rotateLeftMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        rotateLeftMenuItem.setText("Rotate left");
        rotateLeftMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateLeftMenuItemActionPerformed(evt);
            }
        });
        imageMenu.add(rotateLeftMenuItem);

        rotateRightMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        rotateRightMenuItem.setText("Rotate right");
        rotateRightMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateRightMenuItemActionPerformed(evt);
            }
        });
        imageMenu.add(rotateRightMenuItem);

        mainMenu.add(imageMenu);

        setJMenuBar(mainMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBTNActionPerformed
        CaptureHome dao = new CaptureHome();
        java.util.List<Capture> allBatches = dao.getWatingIndexing();
        DefaultListModel capturesLISTModel = new DefaultListModel();
        for (Capture batch : allBatches) {
            capturesLISTModel.addElement(batch);
        }
        waitingToIndexBatchesList.setModel(capturesLISTModel);
        batchesDialog.pack();
        batchesDialog.setModal(true);
        SharedGUIMethods.centerWindow(batchesDialog);
        batchesDialog.setVisible(true);
    }//GEN-LAST:event_searchBTNActionPerformed

    private void batchesDlgShowBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batchesDlgShowBTNActionPerformed
        
    }//GEN-LAST:event_batchesDlgShowBTNActionPerformed

    private void treeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeValueChanged
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
        if (selectedNode != null) {
            if (selectedNode.getUserObject() instanceof Capture) {
                Capture capture = (Capture) selectedNode.getUserObject();

                if (currentDoc != null) {
                    Capture newDoc = null;
                    switch (capture.getType()) {
                        case Constants.PAGE_TYPE:
                            newDoc = capture.getCapture();
                            break;
                        case Constants.DOC_TYPE:
                            newDoc = capture;
                            break;
                        case Constants.BATCH_TYPE:
                            newDoc = null;
                            break;
                    }
                    if (!currentDoc.equals(newDoc)) {
                        int option = JOptionPane.showConfirmDialog(this, "Save Document?");
                        switch (option) {
                            case JOptionPane.YES_OPTION:
                                saveData();
                            case JOptionPane.NO_OPTION:
                                clearGUI();
                                break;
                            case JOptionPane.CANCEL_OPTION:
                                tree.setSelectionPath(evt.getOldLeadSelectionPath());
                                return;
                        }
                    } else {
                    }
                }

                if (capture.getType() == Constants.PAGE_TYPE) {
                    //Image image = null;
                    Rep rep = new RepHome().getAllRep().get(0);
                    ImageLoader imgLoader = new ImageLoader(rep.getPath() + "/" + currentBatch.getId(), capture.getPath(), capture.getPath());

                    currentPage = capture;
                    currentDoc = capture.getCapture();
                    currentImage = imgLoader.getBimage();
                    //  currentImage = readImage(capture.getPath());
                    imageCanvas.setImage(currentImage);
                    imagePanel.setViewportView(imageCanvas);
                } else if (capture.getType() == Constants.DOC_TYPE) {
                    currentImage = null;
                    currentDoc = capture;
                    imageCanvas.setImage(currentImage);
                    imagePanel.setViewportView(imageCanvas);
                } else if (capture.getType() == Constants.BATCH_TYPE) {
                    currentImage = null;
                    currentDoc = null;
                    imageCanvas.setImage(currentImage);
                    imagePanel.setViewportView(imageCanvas);
                }
            } else {
                imageCanvas.setImage(null);
                imagePanel.setViewportView(imageCanvas);
            }
        }
        if (currentDoc != null) {
            loadData();
        }
    }//GEN-LAST:event_treeValueChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        
    }//GEN-LAST:event_formWindowClosing

    private void batchesDlgcancleBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batchesDlgcancleBTNActionPerformed
        batchesDialog.dispose();
    }//GEN-LAST:event_batchesDlgcancleBTNActionPerformed

    private void openBatchMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openBatchMenuItemActionPerformed
        searchBTNActionPerformed(evt);
    }//GEN-LAST:event_openBatchMenuItemActionPerformed

    private void repleaseBatchMenueItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repleaseBatchMenueItemActionPerformed
         
    }//GEN-LAST:event_repleaseBatchMenueItemActionPerformed

    private void saveDocMenueItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDocMenueItemActionPerformed
        
    }//GEN-LAST:event_saveDocMenueItemActionPerformed

    private void exitFrameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitFrameMenuItemActionPerformed
        formWindowClosing(null);
        System.exit(0);
    }//GEN-LAST:event_exitFrameMenuItemActionPerformed

private void rotateRightMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateRightMenuItemActionPerformed
        
}//GEN-LAST:event_rotateRightMenuItemActionPerformed

private void rotateLeftMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateLeftMenuItemActionPerformed
         
}//GEN-LAST:event_rotateLeftMenuItemActionPerformed

private void autoFitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoFitMenuItemActionPerformed
         
}//GEN-LAST:event_autoFitMenuItemActionPerformed

private void minimzeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minimzeMenuItemActionPerformed
        
}//GEN-LAST:event_minimzeMenuItemActionPerformed

private void maxmizeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxmizeMenuItemActionPerformed
        
}//GEN-LAST:event_maxmizeMenuItemActionPerformed

private void previousMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousMenuItemActionPerformed
        
}//GEN-LAST:event_previousMenuItemActionPerformed

private void nextMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextMenuItemActionPerformed
        
}//GEN-LAST:event_nextMenuItemActionPerformed

    private void loadData() {
        DocumentDataHome ddh = new DocumentDataHome();
        List<DocumentData> docFieldData = ddh.getDocumentDataByID(currentDoc.getId());
        for (int i = 0; i < allFields.size(); i++) {
            Field field = allFields.get(i);
            for (int j = 0; j < docFieldData.size(); j++) {
                DocumentData documentData = docFieldData.get(j);
                if (field.getId().equals(documentData.getFieldId())) {
                    Component component = fieldsComponents.get(i);
                    if (component instanceof JTextField) {
                        ((JTextField) component).setText(documentData.getFieldValue());
                    } else if (component instanceof JComboBox) {
                        ((JComboBox) component).setSelectedItem(documentData.getFieldValue());
                    }
                }
            }
        }
    }

    private void clearGUI() {
        if (fieldsComponents != null) {
            for (Component component : fieldsComponents) {
                if (component instanceof JTextField) {
                    ((JTextField) component).setText("");
                }
            }
        }
    }

    private void saveData() {
        Long doc_id = null;
        Long field_id = null;
        String field_value = null;
        // 1. get Current Doc
        Capture document = null;
        if (currentPage != null) {
            document = currentPage.getCapture();
        } else {
            document = currentDoc;
        }
        doc_id = document.getId();
        // 2. get Enabled Fileds Components
        // 3. get associated filed id
        for (int i = 0; i < allFields.size(); i++) {
            Field field = allFields.get(i);
            Component fieldComponent = fieldsComponents.get(i);
            if (fieldComponent.isVisible()) {
                field_id = field.getId();
                if (fieldComponent instanceof JTextField) {
                    field_value = ((JTextField) fieldComponent).getText();
                } else if (fieldComponent instanceof JComboBox) {
                    try {
                        field_value = ((JComboBox) fieldComponent).getSelectedItem().toString();
                    } catch (Exception x) {
                        field_value = "";
                    }
                }
                DocumentDataHome documentDataHome = new DocumentDataHome();
                DocumentData documentData = null;
                documentData = documentDataHome.getDocumentDataByDocIDandFieldID(doc_id, field_id);
                if (documentData == null) {
                    documentData = new DocumentData(0L, field_id, doc_id, field_value);
                    documentDataHome.persist(documentData);
                } else {
                    documentData.setFieldValue(field_value);
                    documentDataHome.update(documentData);
                }

                // update Batch

//                Capture batch = currentBatch.getCapture();
//                batch.setStatus(CaptureStatus.INDEXED);
//                captureHome.updateCaptureState(batch);
                // update document
                //update pages to
            }
        }
        CaptureHome captureHome = new CaptureHome();
        document.setStatus(CaptureStatus.INDEXED);
        captureHome.updateCaptureState(document);
    }

    

    private void releasResources() {
        rootNode = new DefaultMutableTreeNode("Root");
        treeModel = new DefaultTreeModel(rootNode);
        tree.setModel(treeModel);
        tree.setSelectionPath(getPath(rootNode));
        pagesMap = new HashMap<String, Capture>();
        imageTracker = new MediaTracker(this);
        imageCanvas = new ImageCanvas();
        errorFieldsLabels = null;
        fieldsLabels = null;
        fieldsComponents = null;
        allFields = null;
        allFields = new FieldHome02().listAllFields();
        imagePanel.getVerticalScrollBar().setUnitIncrement(50);
        docDataPanel.removeAll();
         
        treeDS = new Tree();
        currentDoc = null;
    }

    public TreePath getPath(TreeNode node) {
        List list = new ArrayList();
        // Add all nodes to list
        while (node != null) {
            list.add(node);
            node = node.getParent();
        }
        Collections.reverse(list);
        // Convert array of nodes to TreePath
        return new TreePath(list.toArray());
    }

    public void loadSelectedBatch() {
        rootNodeDS = new Node("Root");
        treeDS.setRootElement(rootNodeDS);
        Node batchNode = new Node(currentBatch);
        rootNodeDS.addChild(batchNode);

        Set<Capture> documents = currentBatch.getCaptures();
        for (Capture document : documents) {
            Node documentNode = new Node(document);
            batchNode.addChild(documentNode);
            List<DocumentData> documentData = new DocumentDataHome02().getDocumentDataByID(document.getId());
            Collections.sort(documentData);
            Node<List<DocumentData>> documentDataNode =
                    new Node<List<DocumentData>>(documentData);
            documentNode.addChild(documentDataNode);
        }
    }

    private void createUserFolder() {
        Set<Node<Capture>> batches = rootNodeDS.getChildren();
        String path = "";
        for (Node<Capture> batchNodeDS : batches) {
            path = Constants.CLIENT_CAPTURE_FOLDER
                    + Constants.LINE_SEPARATOR + batchNodeDS.getData().getId();
            File file = new File(path);
            if (!file.exists()) {
                file.mkdirs();
            }
        }
    }

    private Image readImage(String imageName) {
        Image img = null;
        try {
            TIFFReader reader = new TIFFReader(new File(userBatchFolder + Constants.LINE_SEPARATOR + imageName));
            RenderedImage rm = reader.getPage(0);
//            ColorModel cm = rm.getColorModel();
//            System.out.println("CM "+ cm.getColorSpace().getType());
            BufferedImage bi = ImageUtils.convertRenderedImage(rm);
            img = Toolkit.getDefaultToolkit().createImage(bi.getSource());
            imageTracker.addImage(img, 0);
            imageTracker.waitForID(0);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return img;
    }

//    private void startLoading() {
//        SwingWorker sw = new SwingWorker() {
//
//            @Override
//            protected Object doInBackground() throws Exception {
//                statusLBL2.setText("loading");
//                repProtocolPath = currentBatch.getCategory().getRep().getProtocolPath()
//                        + Constants.LINE_SEPARATOR + currentBatch.getId();
//                userBatchFolder = Constants.CLIENT_CAPTURE_FOLDER
//                        + Constants.LINE_SEPARATOR + currentBatch.getId();
//                imageLoader = new ImageLoader(pagesMap, repProtocolPath, userBatchFolder);
//                imageLoader.run();
//                return null;
//            }
//
//            @Override
//            protected void done() {
//                statusLBL2.setText("Done");
//            }
//        };
//        sw.execute();
//    }
    private void updateTree() {
        treeModel = (DefaultTreeModel) tree.getModel();
        rootNode = (DefaultMutableTreeNode) treeModel.getRoot();
        rootNode.setUserObject(currentBatch);
        Set<Capture> documents = currentBatch.getCaptures();
        for (Capture document : documents) {
            if (document.getStatus() != CaptureStatus.INDEXED) {
                DefaultMutableTreeNode documentNode =
                        new DefaultMutableTreeNode(document);
                rootNode.add(documentNode);
                Set<Capture> pages = document.getCaptures();
                for (Capture page : pages) {
                    DefaultMutableTreeNode pageNode =
                            new DefaultMutableTreeNode(page);
                    documentNode.add(pageNode);
                    pagesMap.put(page.getPath(), page);
                }
            }
        }



//        Set<Node<Capture>> batchesDS = rootNodeDS.getChildren();
//
//        for (Node<Capture> batchDS : batchesDS) {
//            Capture batch = batchDS.getData();
//            DefaultMutableTreeNode batchNode =
//                    new DefaultMutableTreeNode(batch);
//            rootNode.add(batchNode);
//
//            Set<Node<Capture>> docNodesDS = batchDS.getChildren();
//            for (Node<Capture> docNodeDs : docNodesDS) {
//                Capture document = docNodeDs.getData();
//                DefaultMutableTreeNode docNode =
//                        new DefaultMutableTreeNode(document);
//                batchNode.add(docNode);
//                Set<Node<Capture>> pagesNodesDS = docNodeDs.getChildren();
//                for (Node<Capture> pageNodeDs : pagesNodesDS) {
//                    Capture page = pageNodeDs.getData();
//                DefaultMutableTreeNode pageNode =
//                        new DefaultMutableTreeNode(page);
//                batchNode.add(pageNode);
//                }
//            }
//            Set<String> attributes = new LinkedHashSet<String>();
//            for (Node docNodeDS : batchDS.getChildren()) {
//                Set<Node> children = docNodeDS.getChildren();
//                for (Node<List<DocumentData>> node : children) {
//                    List<DocumentData> docAttribues = node.getData();
//                    if (docAttribues.size() != 0){
//                        for (DocumentData documentData : docAttribues) {
//                        if (documentData.getFieldId().equals(mainFiled.getId())){
//                            String attribValue = documentData.getFieldValue();
//                            attribValue = ((attribValue == null ||"".equals(attribValue)) ? Constants.ATTRIBUTE_TXT : attribValue);
//                            attributes.add(attribValue);
//                        }
//                    }
//                    }else{
//                    }
//
//                }
//            }
//            for (String attribute : attributes) {
//                DefaultMutableTreeNode attributeNode =
//                        new DefaultMutableTreeNode(attribute);
//                batchNode.add(attributeNode);
//                for (Node<Capture> documentNodeDS : batchDS.getChildren()) {
//                    for (Node node : documentNodeDS.getChildren()) {
//                       List<DocumentData> docDataList =   ( List<DocumentData>) node.getData();
//                        for (DocumentData documentData : docDataList) {
//                            if (documentData.getFieldId().equals(mainFiled.getId())){
//                                String docFiledValue = documentData.getFieldValue();
//                                docFiledValue = ((docFiledValue == null ||"".equals(docFiledValue)) ? Constants.ATTRIBUTE_TXT : docFiledValue);
//                                if (attribute.equals(docFiledValue)){
//                                    Capture document = documentNodeDS.getData();
//                                    DefaultMutableTreeNode documentTreeNode =
//                                            new DefaultMutableTreeNode(document);
//                                    attributeNode.add(documentTreeNode);
//                                    for (Capture page : document.getCaptures()) {
//                                        page = nVLCapture(page);
//                                        if (!page.getDeleted() && page.getSaved()) {
//                                            DefaultMutableTreeNode leaf = new DefaultMutableTreeNode(page.getPath());
//                                            documentTreeNode.add(leaf);
//                                        }
//                                    }
//                                }
//                            }
//                        }
//                    }
//                }
//            }


//            Set<Node<Capture>> docNodesDS = batchDS.getChildren();
//            for (Node<Capture> docNodeDs : docNodesDS) {
//                Capture document = docNodeDs.getData();
//                DefaultMutableTreeNode docNode =
//                        new DefaultMutableTreeNode(document);
//                batchNode.add(docNode);
//
//            }


//        docNode = new DefaultMutableTreeNode(currentDoc.getPath());
//        rootNode.add(docNode);
//        treeModel.insertNodeInto(docNode, rootNode, rootNode.getChildCount() - 1);
//        treeModel.reload();
//        for (Capture page : currentDoc.getCaptures()) {
//            page = nVLCapture(page);
//            if (!page.getDeleted() && page.getSaved()) {
//                DefaultMutableTreeNode leaf = new DefaultMutableTreeNode(page.getPath());
//                docNode.add(leaf);
//                treeModel.insertNodeInto(leaf, docNode, docNode.getChildCount() - 1);
//                treeModel.reload();
//            }
//
//        }
//        }
        treeModel.reload();
        tree.setSelectionPath(getPath(rootNode));
    }

    private void buildFieldsPanel() {
        fieldsComponents = new ArrayList<Component>();
        fieldsLabels = new ArrayList<JLabel>();
        errorFieldsLabels = new ArrayList<JLabel>();
        for (final Field field : allFields) {
            // lable
            JLabel fieldlabel = new JLabel(field.getName() + "(" + field.getAlias() + ")");
            JLabel errorLable = new JLabel("");
            errorLable.setForeground(new Color(0, 102, 51));
            if (rightDirection) {
                fieldlabel.setHorizontalAlignment(SwingConstants.TRAILING);
            }
            fieldsLabels.add(fieldlabel);
            docDataPanel.add(fieldlabel);

            // component
            Component fieldComponent = null;
            if (field.getType().equals(Constants.VAL_STRING)) {
                fieldComponent = new JTextField();
            } else if (field.getType().equals(Constants.VAL_NUMBER)) {
                fieldComponent = new JTextField();
                fieldComponent.addFocusListener(new java.awt.event.FocusAdapter() {

                    @Override
                    public void focusLost(java.awt.event.FocusEvent evt) {
                        fieldComponentFocusLost(evt, field);
                    }
                });
                errorLable.setText("Invalid number");
            } else if (field.getType().equals(Constants.VAL_DATE)) {
                fieldComponent = new JTextField();
                fieldComponent.addFocusListener(new java.awt.event.FocusAdapter() {

                    @Override
                    public void focusLost(java.awt.event.FocusEvent evt) {
                        fieldComponentFocusLost(evt, field);
                    }
                });
                errorLable.setText(field.getDateFormat());
            } else if (field.getType().equals(Constants.VAL_BOOLEAN)) {
                fieldComponent = new JComboBox(new String[]{"Yes", "No"});
            } else if (field.getType().equals(Constants.VAL_LIST)) {
                fieldComponent = new JComboBox(field.getListData().toArray());
            }
            if (rightDirection) {
                if (fieldComponent instanceof JTextField) {
                    ((JTextField) fieldComponent).setHorizontalAlignment(SwingConstants.TRAILING);
                }
            } else if (fieldComponent instanceof JComboBox) {
                ((JComboBox) fieldComponent).setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
            }
            fieldsComponents.add(fieldComponent);
            docDataPanel.add(fieldComponent);

            if (rightDirection) {
                errorLable.setHorizontalAlignment(SwingConstants.TRAILING);
            }
            errorFieldsLabels.add(errorLable);
            docDataPanel.add(errorLable);
        }
        docDataPanel.repaint();
//        hideFieldsPanel();
    }

    private void hideFieldsPanel() {
        docDataJScrollPanel.setViewportView(null);
    }

    private void fieldComponentFocusLost(FocusEvent evt, Field field) {
        Object source = evt.getSource();
        String text = ((JTextField) source).getText();
        String message = new String();
        boolean b = false;
        if (field.getType().equals(Constants.VAL_DATE)) {
            b = isValidDate(text, field.getDateFormat());
            message = "error in date format";
        } else if (field.getType().equals(Constants.VAL_NUMBER)) {
            b = isValidNumber(text);
            message = "error in Numirc Value";
        }
        if (!b) {
            JOptionPane.showMessageDialog(this, message);
//            ((JTextField) evt.getSource()).requestFocus();

        }
    }

    private boolean isValidDate(String date, String dateFormat) {
        if (dateFormat != null) {
            if (dateFormat.contains("-")) {
                dateFormat = dateFormat.replaceAll("-", "/");
            }
        }
        if (date != null) {
            if (date.contains("-")) {
                date = date.replaceAll("-", "/");
            }
        }

        SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);
        String errorMessage = "";
        Date testDate = null;
        try {
            testDate = sdf.parse(date);
        } catch (ParseException e) {
            errorMessage = "Invalid date formate";
            System.out.println(errorMessage);
            return false;
        }
        if (!sdf.format(testDate).equals(date)) {
            errorMessage = "Invalid date formate";
            System.out.println(errorMessage);
            return false;
        }
        return true;
    }

    private boolean isValidNumber(String number) {
        try {
            float f = Float.parseFloat(number);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
//                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
//                    UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
//                    UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsClassicLookAndFeel");
                } catch (Exception e) {
                    e.printStackTrace();
                }
                QA viewerFrame = new QA();
                viewerFrame.setVisible(true);
                SwingUtilities.updateComponentTreeUI(viewerFrame);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem autoFitMenuItem;
    private javax.swing.JButton barcodeButton;
    private javax.swing.JDialog batchesDialog;
    private javax.swing.JButton batchesDlgShowBTN;
    private javax.swing.JButton batchesDlgcancleBTN;
    private javax.swing.JPanel containerPanel;
    private javax.swing.JButton createDocButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JScrollPane docDataJScrollPanel;
    private javax.swing.JPanel docDataPanel;
    private javax.swing.JMenuItem exitFrameMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu imageMenu;
    private javax.swing.JScrollPane imagePanel;
    private javax.swing.JToolBar imageToolBar;
    private javax.swing.JButton indexButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JMenuBar mainMenu;
    private javax.swing.JMenuItem maxmizeMenuItem;
    private javax.swing.JToolBar menuToolBar;
    private javax.swing.JMenuItem minimzeMenuItem;
    private javax.swing.JMenuItem nextMenuItem;
    private javax.swing.JMenuItem openBatchMenuItem;
    private javax.swing.JMenuItem previousMenuItem;
    private javax.swing.JButton refuseButton;
    private javax.swing.JButton releaseButton;
    private javax.swing.JMenuItem repleaseBatchMenueItem;
    private javax.swing.JButton rotate90Button;
    private javax.swing.JButton rotate90Left;
    private javax.swing.JMenuItem rotateLeftMenuItem;
    private javax.swing.JMenuItem rotateRightMenuItem;
    private javax.swing.JButton saveButton;
    private javax.swing.JMenuItem saveDocMenueItem;
    private javax.swing.JButton searchBTN;
    private javax.swing.JButton selectCategoryButton;
    private javax.swing.JToolBar.Separator separator03;
    private javax.swing.JToolBar.Separator separator04;
    private javax.swing.JLabel statusLBL;
    private javax.swing.JLabel statusLBL2;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JTree tree;
    private javax.swing.JScrollPane treeScrolPan;
    private javax.swing.JSplitPane viewerSplitPan;
    private javax.swing.JList waitingToIndexBatchesList;
    private javax.swing.JButton zoominButton;
    private javax.swing.JButton zoomoutButton;
    // End of variables declaration//GEN-END:variables
//    private ImageLoader imageLoader;
    private MediaTracker imageTracker;
    private String repProtocolPath;
    private ImageCanvas imageCanvas;
    private DefaultMutableTreeNode rootNode;
    private DefaultTreeModel treeModel;
    private int zoom = Constants.ZOOM_DEFAULT;
    public Users currentUser;
    public Capture currentDoc;
    public Capture currentBatch;
    public Rep currentRep;
    private HashMap<String, Capture> pagesMap;
    private String userBatchFolder;
    private int rotationDirection;
    private Image currentImage;
    private Capture currentPage;
    private List<Field> allFields;
    private List<Component> fieldsComponents;
    private List<JLabel> fieldsLabels;
    private List<JLabel> errorFieldsLabels;
    private boolean rightDirection;
    private Tree treeDS;
    private Node rootNodeDS;
}
